1.1
SELECT q_1.store, q_1.bq
FROM (SELECT SUM(i.bottle_qty) AS bq, i.store AS store
      FROM iowa AS i
      GROUP BY i.store
      ORDER BY bq DESC) AS q_1
LIMIT 1;

-- 2633

1.2
SELECT i.description
FROM iowa AS i
WHERE i.store=2633
GROUP BY i.item
ORDER BY SUM(i.bottle_qty) DESC
LIMIT 1;

-- Juarez Tequila Gold

1.3
SELECT i1.zipcode, i1.category_name, max(i1.bottle_qty)
FROM (
    SELECT zipcode, category_name, SUM(bottle_qty) AS bottle_qty
    FROM iowa
    GROUP BY zipcode, category_name) AS i1
GROUP BY i1.zipcode
ORDER BY i1.bottle_qty DESC
LIMIT 5;

-- 52402|80 PROOF VODKA|235585
-- 52240|80 PROOF VODKA|224621
-- 50314|80 PROOF VODKA|181022
-- 50320|80 PROOF VODKA|163730
-- 51501|80 PROOF VODKA|160206

1.4
pragma case_sensitive_like=ON;
SELECT i1.city
FROM iowasmall AS i1
GROUP BY i1.store
HAVING NOT EXISTS (
    SELECT DISTINCT i2.item
    FROM iowasmall AS i2
    WHERE i2.description LIKE '%scotch%'
    EXCEPT
    SELECT i3.item
    FROM iowasmall AS i3
    WHERE i3.store=i1.store);
SELECT i1.item, AVG(i1.value)

-- Empty output

1.5
FROM (
    SELECT i2.item AS item, i2.store AS store, AVG(i2.btl_price/i2.liter_size) AS value
    FROM iowa AS i2
    GROUP BY i2.item, i2.store
) AS i1
GROUP BY i1.item
ORDER BY AVG(i1.value)
LIMIT 10;

-- 86390|0.00319487272268173

1.6


Python:
pro: Complete programming language, easy for writing and maintaining.
cron: Not dedicatedly designed for query, efficiency could be a problem.
SQL:
pro: Powerful backend support for querys.
cron: Turning incomplete, awkward w.r.t complicated query conditions.

2.1
* C -> A, A -> B, C -> B, CB -> A, AC -> B
* C

2.2
* AB->C, AB->D, BC->A, BC->D, CD->B, CD->A, AD->C, AD->B, BCD->A, ABD->C, ACD->B, ABC->D
* AB, BC, CD, AD

2.3
date, store, vendor_no, item

2.4
Table #1: store, convenience_store, address, name, city, zipcode, store_location, county_number, county. KEYS: store
Table #2: vendor_no, vendor. KEYS: vendor_no
Table #3: category, category_name. KEYS: category
Table #4: item, category, liter_size, description, state_btl_cost, btl_price. KEYS: item
Table #5: date, store, vendor_no, item, pack, bottle_qty, total. KEYS: date, store, vendor_no, item

Justification: First of all, the minimum cover is calculated, which turns out that only the first step (turn to standard form) is effective. Then, BCNF is recursively applied till no violation occurs. Finally, tables with the same key are combined to yield the final result. 

2.5
The schema is anomaly free because 3NF decomposition is used here. Also, it can be easily verified that it is also redundancy free, as BCNF holds for each table.

2.6



2.7
SELECT COUNT(DISTINCT name)
FROM iowa
WHERE store=2508;

-- 3

2.8
This should not be a functional dependency, because the previous page shows that the same store can have different names.
